library(RecordLinkage)
library(RecordLinkage)#
data(RLdata500)#
head(RLdata500)
choose(500,2)
last_init <- substr(RLdata500[,"lname_c1"], 1, 1)
head(last_init)
last_init
length(unique(last_init))
tbl <- table(last_init)
head(tbl)
summary(as.numeric(tbl))
sapply(tbl, choose, k=2)
sum(sapply(tbl, choose, k=2))
Code to extract subset of duplicate records#
RLdata500c <- RLdata500[,-c(2,4)]#
cln <- table(identity.RLdata500)#
iddup <- which(cln>1)-1#
dup <- which(identity.RLdata500%in%iddup)#
sub_dup <- RLdata500c[dup,]#
oid <- order(identity.RLdata500[dup])#
dup_set <- sub_dup[oid,]#
tail(dup_set)
levenshteinSim("SCHUTE", "SCHULTE")
levenshteinSim("CHRISTA", "CHRISTAH")
jarowinkler(c("SCHUTE","CHRISTA"),#
            c("SCHULTE","CHRISTAH"))
tail(soundex(dup_set$fname_c1))
dup_set$fname_c1)
dup_set$fname_c1
tail(soundex(dup_set$fname_c1))
(soundex(dup_set$fname_c1))
soundex(dup_set$lname_c1)
rpairs <- compare.dedup(RLdata500c, #
blockfld = list(1, 3), #list with blocking fields#
identity = identity.RLdata500)
head(rpairs)
head(rpairs$pairs)
head(RLdata500)
head(RLdata500c)
rpairsfuzzy <- compare.dedup(RLdata500c, phonetic = FALSE, blockfld = 3,#
strcmp = TRUE, strcmpfun = jarowinkler)
head(rpairsfuzzy)
head(rpairs$fuzzy)
head(rpairsfuzzy$pairs)
head(rpairs)
rpairs1 <- epiWeights(rpairs)
head(rpairs1)
rpairs1$Wdata[1:5]
summary(rpairs1)
result <- epiClassify(rpairs1, 0.7)
summary(result)
head(RLdata500c)
?RecordLinkage()
identity.RLdata500
library(knitr)#
library(ggplot2)
library(blink) # load blink library
library(RecordLinkage) # load data library
data("RLdata500") # load data
head(RLdata500) # take a look
X.c <- as.matrix(RLdata500[, c("by","bm","bd")])
X.s <- as.matrix(RLdata500[, c("fname_c1", "lname_c1")])
head(X.c)
file.num <- rep(c(1, 2, 3), c(200, 150, 150))
a <- 1#
b <- 999
d <- function(s1, s2) {#
  adist(s1, s2) # approximate string distance#
}
c <- 1
lam.gs <- rl.gibbs(file.num = file.num, # file#
                   X.s = X.s, X.c = X.c, # data #
                   num.gs = 10, # iterations#
                   a = a, b = b, # prior params#
                   c = c, d = d, # distortion#
                   M = 500) # max # latents
head(lam.gs)
class(lam.gs)
size_est <- apply(lam.gs, 1, function(x) { #
  length(unique(x)) #
  })
size_est
theme_set(theme_bw(base_family = "serif", base_size = 15))#
#
ggplot() +#
  geom_line(aes(1:100000, size_est)) +#
  xlab("Iteration") +#
  ylab("Estimated size")#
#
ggplot() +#
  geom_histogram(aes(size_est[-(1:25000)])) +#
  geom_vline(aes(xintercept=450), colour = "red") +#
  geom_vline(aes(xintercept=mean(size_est[-(1:25000)])), lty=2) +#
  xlab("Estimated size") +#
  xlim(c(400, 500))
theme_set(theme_bw(base_family = "serif", base_size = 15))
ggplot() +#
  geom_line(aes(1:100000, size_est)) +#
  xlab("Iteration") +#
  ylab("Estimated size")
ggplot() +#
  geom_histogram(aes(size_est[-(1:25000)])) +#
  geom_vline(aes(xintercept=450), colour = "red") +#
  geom_vline(aes(xintercept=mean(size_est[-(1:25000)])), lty=2) +#
  xlab("Estimated size") +#
  xlim(c(400, 500))
est_links_pair <- pairwise(links(lam.gs[-(1:25000), ]))
data("cora")#
data("cora_gold")
data("RLdata")
library("RLdata")
data("cora")#
data("cora_gold")
not_missing <- complete.cases(cora[, c("year", "journal", "title", "authors")])
X.c <- as.matrix(cora[not_missing, c("year","journal")])
head(not_missing)
head(X.c)
X.s <- as.matrix(cora[not_missing, c("title","authors")])
head(cora)
head(cora_gold)
file.num <- rep(c(1,2,3), (200,200,160))
file.num <- rep(c(1,2,3), c(200,200,160))
a
b
lam.gs <- rl.gibbs(file.num = file.num, # file#
                   X.s = X.s, X.c = X.c, # data #
                   num.gs = 50, # iterations#
                   a = a, b = b, # prior params#
                   c = c, d = d, # distortion#
                   M = nrow(X.s)) # max # latents
# estimated pairwise links#
est_links_pair <- pairwise(links(lam.gs))#
#
# true pairwise links, only for those included#
# get true number#
included_idx <- seq_len(sum(not_missing)) #
names(included_idx) <- cora[not_missing, "id"]#
included_pairs <- subset(cora_gold, id1 %in% names(included_idx) & id2 %in% names(included_idx))#
#
# get index for graphmaking#
included_pairs <- apply(included_pairs, 2, function(col) {#
  names <- as.character(col)#
  included_idx[names]#
})#
#
# need list of pairs to compare#
true_links_pair <- split(included_pairs, seq(nrow(included_pairs)))#
#
#comparison#
comparison <- links.compare(est_links_pair, true_links_pair, counts.only = TRUE)#
#
# precision#
precision <- comparison$correct/(comparison$incorrect + comparison$correct)#
#
# recall#
recall <- comparison$correct/(comparison$correct + comparison$missing)
c(precision, recall)
size_est <- apply(lam.gs, 1, function(x) { #
  length(unique(x)) #
  })
size_est
library(igraph)#
g <- make_empty_graph(length(included_idx))#
g <- add_edges(g, as.vector(t(included_pairs)))#
clust <- components(g, "weak")#
#
# plots of results#
theme_set(theme_bw(base_family = "serif", base_size = 30))#
#
ggplot() +#
  geom_line(aes(1:10, size_est)) +#
  xlab("Iteration") +#
  ylab("Estimated size")#
#
ggplot() +#
  geom_histogram(aes(size_est)) +#
  geom_vline(aes(xintercept=clust$no), colour = "red") +#
  geom_vline(aes(xintercept=mean(size_est)), lty=2) +#
  xlab("Estimated size")
1471.25-1278.83
